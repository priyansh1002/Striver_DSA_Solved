#include<iostream>
#include<vector>
using namespace std;

void merge(vector<int> &arr,int low, int mid,int high){
    // int mid=(s+e)/2;
    vector<int> temp;    //2 method
   int left=low;
   int right=mid+1;
   
   while(left<=mid && right<=high){
       if(arr[left]<=arr[right]){
           temp.push_back(arr[left]);
           left++;
       } else {
           temp.push_back(arr[right]);
           right++;
       }
   }
   while(left<=mid){
       temp.push_back(arr[left]);
       left++;
   }
   while(right<=left){
       temp.push_back(arr[right]);
           right++;
   }
   
   for(int i=low;i<=high;i++){
     arr[i]=temp[i-low];    
   }
   // vector<int> first(len1);    // 1 method
    // vector<int> second(len2);
    
    // //copy values
    // int k=s;
    // for(int i=0;i<len1;i++){
    //     first[i]=arr[k++];
    // }
    
    //  k=mid+1;
    // for(int i=0;i<len2;i++){
    //     second[i]=arr[k++];
    // }
    
    // //merge 2 sorted array
    // int index1=0;
    // int index2=0;
    // k=s;
    
    // while(index1<len1 && index2<len2){
    //     if(first[index1]<second[index2]){
    //         arr[k++]=first[index1++];
    //     }else{
    //         arr[k++]=second[index2++];
    //     }
    // }
    // while(index1<len1){
    //     arr[k++]=first[index1++];
    // }
    // while(index2<len2){
    //     arr[k++]=second[index2++];
    // }
}

void MergeSort(vector<int> &arr,int s,int e){
    //Base case
    if(s=e){
        return;
    }
    
    int mid=(s+e)/2;
    //Left Part Sort
    MergeSort(arr,s,mid);
    
    //Right Part Sort
    MergeSort(arr,mid+1,e);
    
    //Merge the array
    merge(arr,s,mid,e);
}
int main(){
   int n;
   cin>>n;
   vector<int> arr(n);
   for(int i=0;i<n;i++){
       cin>>arr[i];
   }
 
   MergeSort(arr,0,n-1);
   
   for(int i=0;i<n;i++){
       cout<<arr[i]<<" ";
   }
    return 0;
}